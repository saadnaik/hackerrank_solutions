/*
Logic Used =>

For each chapter loop through the number of problems that chapter has.
Check if the problem number of that particular chapter is equal to the 
bookPageNum.If yes increment  special number variable.
BookPage will be turned if the chapters problems are over or if the max
problems per page is encountered.

*/

#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

// Complete the workbook function below.
int workbook(int n, int k, vector<int> arr) {

    int bookPageNum=1,curChpProbCount=0,special=0;

    for( int i=0;i<arr.size();i++){ 
        //For each chapter 
        while( curChpProbCount != arr[i] ){
            //while current chapter problem count matches the total problem a chapter has
            curChpProbCount++;
            if( curChpProbCount == bookPageNum ){
                //check if special condition is met
                special++;
            }
            if( curChpProbCount == arr[i] || curChpProbCount%k == 0 ){
                //Turn the page if your current Chaper Problem Count has reached max
                //problems allowed on a page or if it equal to the number of problems
                //the chapter has .As a new chapter will always start from the next page.
                bookPageNum++;
            }         
        }

        curChpProbCount=0; // Make current Chapter Problem Count as 0 for it to be used for next chapter.
    }
    
return special;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string nk_temp;
    getline(cin, nk_temp);

    vector<string> nk = split_string(nk_temp);

    int n = stoi(nk[0]);

    int k = stoi(nk[1]);

    string arr_temp_temp;
    getline(cin, arr_temp_temp);

    vector<string> arr_temp = split_string(arr_temp_temp);

    vector<int> arr(n);

    for (int i = 0; i < n; i++) {
        int arr_item = stoi(arr_temp[i]);

        arr[i] = arr_item;
    }

    int result = workbook(n, k, arr);

    fout << result << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
